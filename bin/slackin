#!/usr/bin/env node

const args = require('args');
const dbg = require('debug');
const config = require('../lib/config');
const slackin = require('../lib');

require('dotenv').config();

const mainLog = dbg('slackin:main');

args
  .option(
    ['p', 'port'], 'Port to listen on',
    config.port,
  )
  .option(
    ['h', 'hostname'], 'Hostname to listen on',
    config.hostname,
  )
  .option(
    ['c', 'channels'], 'One or more comma-separated channel names to allow single-channel guests',
    config.channels,
  )
  .option(
    ['e', 'emails'], 'Restrict sign-up to a list of emails (comma-separated; wildcards are supported)',
    config.emails,
  )
  .option(
    ['i', 'interval'], 'How frequently (ms) to poll Slack',
    config.interval,
  )
  .option(
    ['P', 'path'], 'Path to serve slackin under',
    config.path,
  )
  .option(
    ['s', 'silent'], 'Do not print out warnings or errors',
    config.silent,
  )
  .option(
    ['x', 'cors'], 'Enable CORS for all routes',
    config.cors,
  )
  .option(
    ['a', 'analytics'], 'Google Analytics ID',
    config.analytics,
  )
  .option(
    ['R', 'recaptcha-secret'], 'reCAPTCHA secret',
    config.recaptcha.secret,
  )
  .option(
    ['K', 'recaptcha-sitekey'], 'reCAPTCHA sitekey',
    config.recaptcha.sitekey,
  )
  .option(
    ['I', 'recaptcha-invisible'], 'Use invisible reCAPTCHA',
    config.recaptcha.invisible,
  )
  .option(
    ['T', 'theme'], 'Color scheme to use, "light" or "dark"',
    config.theme,
  )
  .option(
    ['A', 'accent'], 'Accent color to use instead of a theme default',
    config.accent,
  )
  .option(
    ['C', 'coc'], 'Full URL to a CoC that needs to be agreed to',
    config.coc,
  )
  .option(
    ['S', 'css'], 'Full URL to a custom CSS file to use on the main page',
    config.css,
  )
  .option(['?', 'help'], 'Show the usage information');

// todo
let flags = args.parse(process.argv, {
  value: '<team-id> <api-token>',
  help: false,
});

// todo: this is not a deep merge
flags = { ...flags, ...config };

if (flags.help || !flags.org || !flags.token) {
  args.showHelp();
}

const { port, hostname } = flags;
slackin(flags).listen(port, hostname, (err) => {
  if (err) throw err;
  if (!flags.silent) mainLog.enabled = true;
  mainLog('Listening on %s:%d', hostname, port);
});
